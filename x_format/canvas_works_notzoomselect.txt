//todo


canvas:
    fix zoom
    arrow check if prev and next list link

sidebar
    find out what settings
    find out what ?:
    find out what 100 usually
    find out what float
    update input on click canvas

check other versions
 ps2 demo/xbox broke














function load_world_routes(offset) {
    world_options_const = offset
    // let html = `<div><br>---> offset: ${u32(offset, is_little_endian)}<br> amount | ${u32(offset + 4, is_little_endian)}<br> unknown |  [ ${u8(offset + 8, is_little_endian)}, ${u8(offset + 9, is_little_endian)}, ${u8(offset + 10, is_little_endian)}, ${u8(offset + 11, is_little_endian)} ] <br>0 |  ${u32(offset + 12, is_little_endian)}</div>`
    // html += `<table id='world_route_table'>
    //             <tbody>
    //                 <thead>
    //                     <tr>
    //                         <th> index </th>
    //                         <th> x </th>
    //                         <th> y </th>
    //                         <th> z </th>
    //                         <th> w </th>
    //                         <th> prev </th>
    //                         <th> next </th>
    //                         <th> width </th>
    //                         <th> ? 1 </th>
    //                         <th> ? 2 </th>
    //                         <th> ? 3 </th>
    //                         <th> ? 4 float </th>
    //                         <th> relative index </th>
    //                     </tr>
    //                 </thead>`

    let html = `<span style='width:80%;height:100%;display:inherit;'>
                    <div class='data_types_bar' style='overflow:hidden;height:5%;border-bottom:solid 1px #9d9898;box-sizing:border-box;'>
                        <a class='data_bar_options'>Text Field View</a>
                        <a class='data_bar_options'>Canvas View</a>
                    </div>
                    <div id='outer_canvas' style='height:92%;'>
                            <canvas id='canvas'</canvas>
                    </div>
                    <div class='data_types_bar' style='text-align:center;overflow:hidden;height:3%;border-top:solid 1px #9d9898;box-sizing:border-box;'>
                        <input max='10' min='0' step="0.1" id='zoom' style='width:85%;' type="range">
                    </div>
                </span>
                <span id='file_editor_side_panel' class='data_types_bar' style='overflow:hidden;padding:3%;height:100%;width:20%;float: right;border-left:solid 1px #9d9898;box-sizing:border-box;'>
                    <a>Choose a point...</a>
                </span>
`

    route_points_array = []

    for (let i = 0; i < u32(offset + 4, is_little_endian); i++) {
        html += get_world_route_list(u32(offset, is_little_endian) + offset_mid + (i * 128), i)
        // console.log(u32(offset + (i * 128), is_little_endian) + offset_mid)
    }
    // html += `</tbody>
    //     </table>
    //     <h4 id=results>Drag the mouse to see net panning in x,y directions</h4>
    //     <canvas id='canvas' width=700 height=1000></canvas>`

    // html += temp_offset_f(u32(offset_mid + 32, is_little_endian) + offset_mid)

    document.getElementById("file_editor").innerHTML = html

    canvas_2()
}

function get_world_route_list_to_obj(offset, amount) {
    let html = []

    for (let i = 0; i < amount; i++) {
        html.push(u32(offset + (i * 4), is_little_endian))
    }

    return html
}

function get_world_route_list(offset, index) {

    //amount in list 1

    list_3_2_amount = u32(offset + 48, is_little_endian)
    list_1_amount = u32(offset + 60, is_little_endian)

    prev = get_world_route_list_to_obj(u32(offset + 56, is_little_endian) + offset_mid, list_3_2_amount)
    next = get_world_route_list_to_obj(u32(offset + 64, is_little_endian) + offset_mid, list_1_amount)

    route_points_array.push({
        offset: offset,
        x: f32(offset + 32, is_little_endian),
        y: f32(offset + 36, is_little_endian),
        z: f32(offset + 40, is_little_endian),
        prev_list: next,
        next_list: next
    })
    let html = `<tr>
                <td>${index}</td>
                <td> ${f32(offset + 32, is_little_endian).toFixed(2)}</td>
                <td> ${f32(offset + 36, is_little_endian).toFixed(2)}</td>
                <td> ${f32(offset + 40, is_little_endian).toFixed(2)}</td>
                <td> ${f32(offset + 44, is_little_endian)}</td>
                <td> ${u32(offset + 48, is_little_endian)}</td>
                <td> ${u32(offset + 60, is_little_endian)}</td>
                <td> ${f32(offset + 68, is_little_endian).toFixed(2)}</td>
                <td> ${u16(offset + 72, is_little_endian)}</td>
                <td> ${u16(offset + 74, is_little_endian)}</td>
                <td> ${u8(offset + 76, is_little_endian)}, ${u8(offset + 77, is_little_endian)}, ${u8(offset + 78, is_little_endian)}, ${u8(offset + 79, is_little_endian)} ]</td>
                <td> ${f32(offset + 80, is_little_endian)}</td>
                <td> ${u32(offset + 116, is_little_endian)}</td>`

    return ''
}
function canvas_scale(value) {
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");

    ctx.scale(value, value)
}

// function zoom_change() {
//     console.log(this.value)
//     canvas_scale(this.value / 5)
// }

// function mouse_wheel_moved(e) {
//     if (e.deltaY < 0) {
//         zoom.valueAsNumber += 1;
//     } else {
//         zoom.value -= 1;
//     }
//     e.preventDefault();
//     e.stopPropagation();

//     console.log(e.deltaY)
//     // zoom_change()
// }

// function outputsize(e) {
//     if (e[0].contentRect.width == 0) {} else {

//         var canvas = document.getElementById("canvas");
//         // cw = e[0].contentRect.width

//         console.log('o')

//         canvas.width = e[0].contentRect.width

//         // load_world_routes(world_options_const)

//         // document.getElementById("canvas").removeEventListener('mousedown', handleMouseDown)
//         // document.getElementById("canvas").removeEventListener('mousemove', handleMouseMove)
//         // document.getElementById("canvas").removeEventListener('mouseup', handleMouseUp)
//         // document.getElementById("canvas").removeEventListener('mouseout', handleMouseOut)

//     }

// }

function canvas_2() {
    let canvas = document.getElementById("canvas")
    let ctx = canvas.getContext('2d')

    let cameraOffset = {
        x: document.getElementById("outer_canvas").getBoundingClientRect().width / 2,
        y: document.getElementById("outer_canvas").getBoundingClientRect().height / 2
    }
    var BB = canvas.getBoundingClientRect();
    offsetX = BB.left;
    offsetY = BB.top;
    var netPanningX = 0;
    var netPanningY = 0;

    let cameraZoom = 1
    let MAX_ZOOM = 5
    let MIN_ZOOM = 0.1
    let SCROLL_SENSITIVITY = 0.0002

    function draw() {
        if(document.getElementById("outer_canvas") == null){
            return;
        }
        canvas.width = document.getElementById("outer_canvas").getBoundingClientRect().width
        canvas.height = document.getElementById("outer_canvas").getBoundingClientRect().height

        // Translate to the canvas centre before zooming - so you'll always zoom on what you're looking directly at
        ctx.translate(document.getElementById("outer_canvas").getBoundingClientRect().width / 2, document.getElementById("outer_canvas").getBoundingClientRect().height / 2)
        ctx.scale(cameraZoom, cameraZoom)
        ctx.translate(-document.getElementById("outer_canvas").getBoundingClientRect().width / 2 + cameraOffset.x, -document.getElementById("outer_canvas").getBoundingClientRect().height / 2 + cameraOffset.y)
        ctx.clearRect(0, 0, document.getElementById("outer_canvas").getBoundingClientRect().width, document.getElementById("outer_canvas").getBoundingClientRect().height)
    ctx.fillStyle = "#991111"
    drawRect(-50,-50,100,100)
    
    ctx.fillStyle = "#eecc77"
    drawRect(-35,-35,20,20)
    drawRect(15,-35,20,20)
    drawRect(-35,15,70,20)
    
    ctx.fillStyle = "#fff"
    drawText("Simple Pan and Zoom Canvas", -255, -100, 32, "courier")
    
    ctx.rotate(-31*Math.PI / 180)
    ctx.fillStyle = `#${(Math.round(Date.now()/40)%4096).toString(16)}`
    drawText("Now with touch!", -110, 100, 32, "courier")
    
    ctx.fillStyle = "#fff"
    ctx.rotate(31*Math.PI / 180)
    
    drawText("Wow, you found me!", -260, -2000, 48, "courier")
        draw_canvas(cameraOffset.x, cameraOffset.y, cameraZoom, const_index)

        requestAnimationFrame(draw)
    }

    // Gets the relevant location from a mouse or single touch event
    function getEventLocation(e) {
        if (e.touches && e.touches.length == 1) {
            return {
                x: e.touches[0].clientX / 2,
                y: e.touches[0].clientY / 2
            }
        } else if (e.clientX && e.clientY) {
            return {
                x: e.clientX / 2,
                y: e.clientY / 2
            }
        }
    }

    function drawRect(x, y, width, height) {
        ctx.fillRect(x, y, width, height)
    }

    function drawText(text, x, y, size, font) {
        ctx.font = `${size}px ${font}`
        ctx.fillText(text, x, y)
    }

    let selected_index = false
    var const_index = false
    let isDragging = false
    let is_dragging_element = false
    let dragStart = {
        x: 0,
        y: 0
    }

    function onPointerDown(e) {
        e.preventDefault();
        e.stopPropagation();
        const rect = canvas.getBoundingClientRect()
        const x = event.clientX - rect.left
        const y = event.clientY - rect.top
        // console.log("x: " + x + " y: " + y)

        dragStart.x = (getEventLocation(e).x / cameraZoom - cameraOffset.x)
        dragStart.y = (getEventLocation(e).y / cameraZoom - cameraOffset.y)

        if (cameraOffset.x * 2 < 0) {
            temp_x = Math.abs((cameraOffset.x * 2))
        } else {
            temp_x = Math.abs((cameraOffset.x * 2)) * -1
        }
        if (cameraOffset.y * 2 < 0) {
            temp_y = Math.abs((cameraOffset.y * 2))
        } else {
            temp_y = Math.abs((cameraOffset.y * 2)) * -1
        }

        temp_x = x + temp_x
        temp_y = y + temp_y

        startX = parseInt(e.clientX - offsetX);
        startY = parseInt(e.clientY - offsetY);

        temp_x = startX + temp_x
        temp_y = startY + temp_y

        // calculate zoom
        // console.log(temp_x, cameraZoom, startX * cameraZoom)

        selected_index = false

        selected_index = object_clicked(temp_x, temp_y, startX, startY, cameraZoom)

        if (selected_index !== false) {
            append_to_file_editor_side_panel(route_points_array[selected_index].offset)
            is_dragging_element = true
            const_index = selected_index
            return;
        } else {
            isDragging = true
            return;
        }

    }

    function onPointerUp(e) {
        e.preventDefault();
        e.stopPropagation();

        isDragging = false
        is_dragging_element = false
        initialPinchDistance = null
        lastZoom = cameraZoom
    }

    function onPointerMove(e) {
        // console.log(selected_index)
        e.preventDefault();
        e.stopPropagation();

        document.getElementById('canvas').focus();


        if (is_dragging_element === true) {
            e.preventDefault();
            e.stopPropagation();
            const rect = canvas.getBoundingClientRect()
            const x = event.clientX - rect.left
            const y = event.clientY - rect.top
            // console.log("x: " + x + " y: " + y)
            

            dragStart.x = (getEventLocation(e).x / cameraZoom - cameraOffset.x)
            dragStart.y = (getEventLocation(e).y / cameraZoom - cameraOffset.y)

            if (cameraOffset.x * 2 < 0) {
                temp_x = Math.abs((cameraOffset.x * 2))
            } else {
                temp_x = Math.abs((cameraOffset.x * 2)) * -1
            }
            if (cameraOffset.y * 2 < 0) {
                temp_y = Math.abs((cameraOffset.y * 2))
            } else {
                temp_y = Math.abs((cameraOffset.y * 2)) * -1
            }

            temp_x = x + temp_x
            temp_y = y + temp_y

            startX = parseInt(e.clientX - offsetX);
            startY = parseInt(e.clientY - offsetY);

            temp_x = startX + temp_x
            temp_y = startY + temp_y

            // calculate zoom
            // console.log(temp_x, cameraZoom, startX * cameraZoom)

            new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 32, temp_x - startX - 5, is_little_endian)
            new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 40, temp_y - startY - 5, is_little_endian)

            draw_canvas(startX, startY, cameraZoom, selected_index)
            return;

        }

        if (isDragging) {
            cameraOffset.x = (getEventLocation(e).x / cameraZoom - dragStart.x)
            cameraOffset.y = (getEventLocation(e).y / cameraZoom - dragStart.y)
        } else {
            let is_dragging_element = false
            const rect = canvas.getBoundingClientRect()
            const x = event.clientX - rect.left
            const y = event.clientY - rect.top
            // console.log("x: " + x + " y: " + y)

            if (cameraOffset.x * 2 < 0) {
                temp_x = Math.abs((cameraOffset.x * 2))
            } else {
                temp_x = Math.abs((cameraOffset.x * 2)) * -1
            }
            if (cameraOffset.y * 2 < 0) {
                temp_y = Math.abs((cameraOffset.y * 2))
            } else {
                temp_y = Math.abs((cameraOffset.y * 2)) * -1
            }

            temp_cam_x = temp_x/cameraZoom
            temp_cam_y = temp_y/cameraZoom

            temp_x = x + temp_x
            temp_y = y + temp_y

            startX = parseInt(e.clientX - offsetX);
            startY = parseInt(e.clientY - offsetY);

            temp_x = startX + temp_x
            temp_y = startY + temp_y

            // calculate zoom
            selected_index = false

            selected_index = object_clicked(temp_x, temp_y, startX, startY, cameraZoom,temp_cam_x,temp_cam_y)

            if (selected_index !== false) {
                let canvas = document.getElementById("canvas").style.cursor = 'pointer'
                if (is_dragging_element === true) {
                    new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 32, startX - 5 - netPanningX, is_little_endian)
                    new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 40, startY - 5 - netPanningY, is_little_endian)

                    draw_canvas(netPanningX, netPanningY)
                    return;
                }
                return
            } else {

                let canvas = document.getElementById("canvas").style.cursor = 'auto'
                isDragging = false;

                return;

            }

        }
    }

    function handleTouch(e, singleTouchHandler) {
        e.preventDefault();
        e.stopPropagation();
        if (e.touches.length == 1) {
            singleTouchHandler(e)
        } else if (e.type == "touchmove" && e.touches.length == 2) {
            isDragging = false
            handlePinch(e)
        }
    }

    let initialPinchDistance = null
    let lastZoom = cameraZoom

    function handlePinch(e) {
        e.preventDefault()

        let touch1 = {
            x: e.touches[0].clientX,
            y: e.touches[0].clientY
        }
        let touch2 = {
            x: e.touches[1].clientX,
            y: e.touches[1].clientY
        }

        // This is distance squared, but no need for an expensive sqrt as it's only used in ratio
        let currentDistance = (touch1.x - touch2.x) ** 2 + (touch1.y - touch2.y) ** 2

        if (initialPinchDistance == null) {
            initialPinchDistance = currentDistance
        } else {
            adjustZoom(null, currentDistance / initialPinchDistance)
        }
    }

    function adjustZoom(zoomAmount, zoomFactor) {
        if (!isDragging) {
            if (zoomAmount) {
                cameraZoom += zoomAmount
            } else if (zoomFactor) {
                // console.log(zoomFactor)
                cameraZoom = zoomFactor * lastZoom
            }

            cameraZoom = Math.min(cameraZoom, MAX_ZOOM)
            cameraZoom = Math.max(cameraZoom, MIN_ZOOM)

            // console.log(zoomAmount)
        }
    }

    canvas.addEventListener('mousedown', onPointerDown)
    canvas.addEventListener('touchstart', (e)=>handleTouch(e, onPointerDown))
    canvas.addEventListener('mouseup', onPointerUp)
    canvas.addEventListener('mouseout', onPointerUp)

    canvas.addEventListener('touchend', (e)=>handleTouch(e, onPointerUp))
    canvas.addEventListener('mousemove', onPointerMove)
    canvas.addEventListener('touchmove', (e)=>handleTouch(e, onPointerMove))
    canvas.addEventListener('wheel', (e)=>adjustZoom(e.deltaY * SCROLL_SENSITIVITY))

    // Ready, set, go
    draw()
}

function temp_canvas_1() {
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");

    new ResizeObserver(outputsize).observe(document.getElementById('outer_canvas'))

    var selected_index = false

    canvas.addEventListener('wheel', mouse_wheel_moved)
    document.getElementById('zoom').addEventListener('input', zoom_change)

    canvas.width = document.getElementById("outer_canvas").getBoundingClientRect().width
    canvas.height = document.getElementById("outer_canvas").getBoundingClientRect().height

    var cw = canvas.width;
    // var cw_default = cw
    var ch = canvas.height;

    // account for scrolling
    function reOffset() {
        var BB = canvas.getBoundingClientRect();
        offsetX = BB.left;
        offsetY = BB.top;
    }
    var offsetX, offsetY;
    reOffset();
    window.onscroll = function(e) {
        reOffset();
    }
    window.onresize = function(e) {
        reOffset();
    }

    // mouse drag related variables
    var isDown = false;
    var startX, startY;

    // the accumulated horizontal(X) & vertical(Y) panning the user has done in total
    var netPanningX = 0;
    var netPanningY = 0;

    // dx & dy are the distance the mouse has moved since

    is_dragging_element = false

    // listen for mouse events
    document.getElementById("canvas").addEventListener('mousedown', handleMouseDown)
    document.getElementById("canvas").addEventListener('mousemove', handleMouseMove)
    document.getElementById("canvas").addEventListener('mouseup', handleMouseUp)
    document.getElementById("canvas").addEventListener('mouseout', handleMouseOut)

    function handleMouseDown(e) {
        // tell the browser we're handling this event
        e.preventDefault();
        e.stopPropagation();

        // calc the starting mouse X,Y for the drag
        startX = parseInt(e.clientX - offsetX);
        startY = parseInt(e.clientY - offsetY);

        mouseX = parseInt(e.clientX - offsetX);
        mouseY = parseInt(e.clientY - offsetY);

        // dx & dy are the distance the mouse has moved since
        // the last mousemove event
        var dx = mouseX - startX;
        var dy = mouseY - startY;

        // reset the vars for next mousemove
        startX = mouseX;
        startY = mouseY;

        // accumulate the net panning done
        netPanningX += dx;
        netPanningY += dy;

        // set the isDragging flag

        var selected_index = false

        selected_index = object_clicked(netPanningX, netPanningY, startX, startY)

        if (selected_index !== false) {
            // console.log(selected_index)
            append_to_file_editor_side_panel(route_points_array[selected_index].offset)
            is_dragging_element = true
        } else {

            isDown = true;

        }
    }

    function handleMouseUp(e) {
        // tell the browser we're handling this event
        e.preventDefault();
        e.stopPropagation();

        // clear the isDragging flag
        isDown = false;
        is_dragging_element = false;

        console.log("up")
    }

    function handleMouseOut(e) {
        // tell the browser we're handling this event
        e.preventDefault();
        e.stopPropagation();

        // clear the isDragging flag
        isDown = false;
        is_dragging_element = false;
    }

    function handleMouseMove(e) {
        // console.log(selected_index, is_dragging_element)

        if (is_dragging_element === true) {
            startX = parseInt(e.clientX - offsetX);
            startY = parseInt(e.clientY - offsetY);

            mouseX = parseInt(e.clientX - offsetX);
            mouseY = parseInt(e.clientY - offsetY);

            // dx & dy are the distance the mouse has moved since
            // the last mousemove event
            var dx = mouseX - startX;
            var dy = mouseY - startY;

            // reset the vars for next mousemove
            startX = mouseX;
            startY = mouseY;

            // accumulate the net panning done
            netPanningX += dx;
            netPanningY += dy;

            new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 32, startX - 5 - netPanningX, is_little_endian)
            new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 40, startY - 5 - netPanningY, is_little_endian)

            draw_canvas(netPanningX, netPanningY)
            return;

        }

        // only do this code if the mouse is being dragged
        if (!isDown) {
            startX = parseInt(e.clientX - offsetX);
            startY = parseInt(e.clientY - offsetY);

            mouseX = parseInt(e.clientX - offsetX);
            mouseY = parseInt(e.clientY - offsetY);

            // dx & dy are the distance the mouse has moved since
            // the last mousemove event
            var dx = mouseX - startX;
            var dy = mouseY - startY;

            // reset the vars for next mousemove
            startX = mouseX;
            startY = mouseY;

            // accumulate the net panning done
            netPanningX += dx;
            netPanningY += dy;

            // set the isDragging flag
            // console.log(selected_index)

            selected_index = object_clicked(netPanningX, netPanningY, startX, startY)

            if (selected_index !== false) {
                let canvas = document.getElementById("canvas").style.cursor = 'pointer'
                if (is_dragging_element === true) {
                    new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 32, startX - 5 - netPanningX, is_little_endian)
                    new DataView(buffer).setFloat32(route_points_array[selected_index].offset + 40, startY - 5 - netPanningY, is_little_endian)

                    draw_canvas(netPanningX, netPanningY)
                    return;
                }
                return
            } else {

                let canvas = document.getElementById("canvas").style.cursor = 'auto'
                isDown = false;

                return;

            }
        }

        // tell the browser we're handling this event
        e.preventDefault();
        e.stopPropagation();

        // get the current mouse position
        mouseX = parseInt(e.clientX - offsetX);
        mouseY = parseInt(e.clientY - offsetY);

        // dx & dy are the distance the mouse has moved since
        // the last mousemove event
        var dx = mouseX - startX;
        var dy = mouseY - startY;

        // reset the vars for next mousemove
        startX = mouseX;
        startY = mouseY;

        // accumulate the net panning done
        netPanningX += dx;
        netPanningY += dy;

        // console.log(netPanningX,startX,mouseX)

        selected_index = object_clicked(netPanningX, netPanningY, mouseX, mouseY)

        if (selected_index !== false) {
            // console.log(selected_index)
            append_to_file_editor_side_panel(route_points_array[selected_index].offset)
        } else {

            draw_canvas(netPanningX, netPanningY)

        }
    }

}

function draw_canvas(netPanningX, netPanningY, cameraZoom, element_selected) {
    if (element_selected == null) {
        element_selected = route_points_array.length + 1
    }
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");

    // canvas.width = document.getElementById("outer_canvas").getBoundingClientRect().width
    // canvas.height = document.getElementById("outer_canvas").getBoundingClientRect().height

    // var cw = canvas.width;
    // var ch = canvas.height;

    ctx.clearRect(0, 0, document.getElementById("outer_canvas").getBoundingClientRect().width, document.getElementById("outer_canvas").getBoundingClientRect().height);

    // for (var x = -50; x < 2000; x++) {
    //     ctx.fillText(x, x * 20 + netPanningX, ch / 2);
    // }
    // for (var y = -50; y < 50; y++) {
    //     ctx.fillText(y, cw / 2, y * 20 + netPanningY);
    // }

    ctx.fillStyle = '#00dbff'
    for (let i = 0; i < route_points_array.length; i++) {
        let x = f32(route_points_array[i].offset + 32, is_little_endian) + netPanningX
        let z = f32(route_points_array[i].offset + 40, is_little_endian) + netPanningY
        for (let ii = 0; ii < route_points_array[i].prev_list.length; ii++) {
            let route = route_points_array[i].prev_list[ii]
            let new_x = f32(route_points_array[route].offset + 32, is_little_endian) + netPanningX
            let new_z = f32(route_points_array[route].offset + 40, is_little_endian) + netPanningY

            ctx.beginPath();
            ctx.strokeStyle = "#59e6fd";
            // Start a new path
            // ctx.fillRect(x, z, 5, 5)
            // Move the pen to (30, 50)
            ctx.moveTo(x + 5, z + 5);
            // Move the pen to (30, 50)
            ctx.lineTo(new_x + 5, new_z + 5);
            // Draw a line to (150, 100)
            ctx.lineWidth = 2 / cameraZoom;
            // Draw a line to (150, 100)
            ctx.stroke();
            // Render the path

        }
        if (i === element_selected) {
            ctx.fillStyle = '#2eef0b'
            ctx.fillRect(x, z, 10 / cameraZoom, 10 / cameraZoom)
            ctx.fillStyle = '#00dbff'
        } else {
            ctx.fillRect(x, z, 10 / cameraZoom, 10 / cameraZoom)
        }
    }
    // ctx.fillRect(f32(route_points_array[i].offset + 32, is_little_endian) + startX, route_points_array[0].z + startY, 10, 10)

}

function object_clicked(temp_x, temp_y, startX, startY, cameraZoom,temp_cam_x,temp_cam_y) {
    // temp_width = document.getElementById("outer_canvas").getBoundingClientRect().width
    // temp_height = document.getElementById("outer_canvas").getBoundingClientRect().height
    
    console.log(f32(route_points_array[0].offset + 32, is_little_endian) + startX,temp_x,cameraZoom)

    for (let i = 0; i < route_points_array.length; i++) {

        let left_position = (f32(route_points_array[i].offset + 32, is_little_endian)) + startX
        let right_position = (f32(route_points_array[i].offset + 32, is_little_endian)) + startX + 10
        let top_position = (f32(route_points_array[i].offset + 40, is_little_endian)) + startY
        let bottom_position = (f32(route_points_array[i].offset + 40, is_little_endian)) + startY + 10

        if (temp_x > left_position && temp_x < right_position && temp_y > top_position && temp_y < bottom_position) {
            // console.log(i)
            return i
        }
    }

    return false

}

function append_to_file_editor_side_panel(offset) {
    let html = `
                    <a>X Position: </a><br>
                    <input class='text_input' data-type="float" data-offset=${offset + 32} value='${f32(offset + 32, is_little_endian).toFixed(2)}'><br>
                    
                    <a>Y Position: </a><br>
                    <input class='text_input' data-type="float" data-offset=${offset + 36} value='${f32(offset + 36, is_little_endian).toFixed(2)}'><br>
                    
                    <a>Z Position: </a><br>
                    <td class='no_border'><input class='text_input' data-type="float" data-offset=${offset + 40} value='${f32(offset + 40, is_little_endian).toFixed(2)}'><br>
                                        
                    <a>Previous List: </a><br>
                    <input class='text_input' data-type="u32" data-offset=${offset + 48} value='${u32(offset + 48, is_little_endian)}'><br>
                    
                    <a>Next list: </a><br>
                    <input class='text_input' data-type="u32" data-offset=${offset + 60} value='${u32(offset + 60, is_little_endian)}'><br>
                    
                    <a>Width: </a><br>
                    <input class='text_input' data-type="float" data-offset=${offset + 68} value='${f32(offset + 68, is_little_endian).toFixed(2)}'><br>
                    
                    <a>?: </a><br>
                    <input class='text_input' data-type="u16" data-offset=${offset + 72} value='${u16(offset + 72, is_little_endian)}'><br>
                    
                    <a>x: </a><br>
                    <input class='text_input' data-type="u16" data-offset=${offset + 74} value='${u16(offset + 74, is_little_endian)}'><br>
                    
                    <a>x: </a><br>
                    <input class='text_input'  data-type="u8" data-offset=${offset + 76} value='${u8(offset + 76, is_little_endian)}'><br> ${u8(offset + 77, is_little_endian)}, ${u8(offset + 78, is_little_endian)}, ${u8(offset + 79, is_little_endian)}</td>
                    
                    <a>float?: </a><br>
                    <input class='text_input' data-type="float" data-offset=${offset + 80} value='${f32(offset + 80, is_little_endian)}'><br>
                    
                    <a>index: </a><br>
                    <input class='text_input' data-type="u32" data-offset=${offset + 116}  value='${u32(offset + 116, is_little_endian)}'>
                
                `
    let side_panel = document.getElementById('file_editor_side_panel')

    side_panel.innerHTML = html

    let side_panel_array = side_panel.getElementsByTagName('INPUT')

    for (let i = 0; i < side_panel_array.length; i++) {
        side_panel_array[i].addEventListener('change', update_input)
    }

    side_panel.getElementsByTagName('INPUT')
}
//////
/////
////
//
///

// function temp_offset_f(offset) {
//     let html = `<br>---> ${u32(offset, is_little_endian)} |  ${u32(offset + 4, is_little_endian)} | ${u32(offset + 8, is_little_endian)} | ${u32(offset + 12, is_little_endian)} | ${u32(offset + 16, is_little_endian)} | ${u32(offset + 20, is_little_endian)} | ${u32(offset + 24, is_little_endian)} | ${u32(offset + 28, is_little_endian)}<br>--->--->`
//     let i = 0
//     for (; i < u32(offset + 24, is_little_endian); i++) {
//         html += temp_offset_f_2(u32(offset + 28, is_little_endian) + offset_mid + (i * 4))
//     }
//     while (i % 4 !== 0) {
//         i++
//     }
//     html += `<br>${u32(offset + 28, is_little_endian) + offset_mid + (i * 4)} test`

//     return html
// }

// function temp_offset_f_2(offset) {
//     let html = ` ${u32(offset, is_little_endian)} |`

//     return html

// }
